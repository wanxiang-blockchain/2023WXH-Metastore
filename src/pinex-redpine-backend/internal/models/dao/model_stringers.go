// Code generated by "stringer -type=Role,ChainType,DaType,NetworkType,CloudVendor,ProverType,ResourceType -output=./model_stringers.go"; DO NOT EDIT.

package dao

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[POLYGON_ZKEVM_PROVER-1]
	_ = x[POLYGON_ZKEVM_NODE-2]
	_ = x[OP_STACK_NODE-3]
	_ = x[POLYGON_ZKEVM_DB-4]
}

const _Role_name = "POLYGON_ZKEVM_PROVERPOLYGON_ZKEVM_NODEOP_STACK_NODEPOLYGON_ZKEVM_DB"

var _Role_index = [...]uint8{0, 20, 38, 51, 67}

func (i Role) String() string {
	i -= 1
	if i >= Role(len(_Role_index)-1) {
		return "Role(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _Role_name[_Role_index[i]:_Role_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OP_STACK-1]
	_ = x[STARK_NET-2]
	_ = x[POLYGON_ZKEVM-3]
}

const _ChainType_name = "OP_STACKSTARK_NETPOLYGON_ZKEVM"

var _ChainType_index = [...]uint8{0, 8, 17, 30}

func (i ChainType) String() string {
	i -= 1
	if i >= ChainType(len(_ChainType_index)-1) {
		return "ChainType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _ChainType_name[_ChainType_index[i]:_ChainType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ETH-1]
	_ = x[META_STORE-2]
}

const _DaType_name = "ETHMETA_STORE"

var _DaType_index = [...]uint8{0, 3, 13}

func (i DaType) String() string {
	i -= 1
	if i >= DaType(len(_DaType_index)-1) {
		return "DaType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _DaType_name[_DaType_index[i]:_DaType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DEV_NET-1]
	_ = x[TEST_NET-2]
	_ = x[MAIN_NET-3]
}

const _NetworkType_name = "DEV_NETTEST_NETMAIN_NET"

var _NetworkType_index = [...]uint8{0, 7, 15, 23}

func (i NetworkType) String() string {
	i -= 1
	if i >= NetworkType(len(_NetworkType_index)-1) {
		return "NetworkType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _NetworkType_name[_NetworkType_index[i]:_NetworkType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SURFER_CLOUD-1]
	_ = x[AWS-2]
}

const _CloudVendor_name = "SURFER_CLOUDAWS"

var _CloudVendor_index = [...]uint8{0, 12, 15}

func (i CloudVendor) String() string {
	i -= 1
	if i >= CloudVendor(len(_CloudVendor_index)-1) {
		return "CloudVendor(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _CloudVendor_name[_CloudVendor_index[i]:_CloudVendor_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NONE_PROVER-0]
	_ = x[EXCLUSIVE-1]
	_ = x[SHARED-2]
}

const _ProverType_name = "NONE_PROVEREXCLUSIVESHARED"

var _ProverType_index = [...]uint8{0, 11, 20, 26}

func (i ProverType) String() string {
	if i >= ProverType(len(_ProverType_index)-1) {
		return "ProverType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ProverType_name[_ProverType_index[i]:_ProverType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[VM-1]
	_ = x[DB-2]
}

const _ResourceType_name = "VMDB"

var _ResourceType_index = [...]uint8{0, 2, 4}

func (i ResourceType) String() string {
	i -= 1
	if i >= ResourceType(len(_ResourceType_index)-1) {
		return "ResourceType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _ResourceType_name[_ResourceType_index[i]:_ResourceType_index[i+1]]
}
